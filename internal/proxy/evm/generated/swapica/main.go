// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swapica

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SwapicaStatus is an auto generated low-level Go binding around an user-defined struct.
type SwapicaStatus struct {
	State      uint8
	ExecutedBy *big.Int
}

// SwapicaMetaData contains all meta data concerning the Swapica contract.
var SwapicaMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enumSwapica.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"executedBy\",\"type\":\"uint256\"}],\"indexed\":true,\"internalType\":\"structSwapica.Status\",\"name\":\"status\",\"type\":\"tuple\"}],\"name\":\"MatchUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enumSwapica.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"executedBy\",\"type\":\"uint256\"}],\"indexed\":true,\"internalType\":\"structSwapica.Status\",\"name\":\"status\",\"type\":\"tuple\"}],\"name\":\"OrderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"signaturesThreshold_\",\"type\":\"uint256\"}],\"name\":\"__Signers_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"__Swapica_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"}],\"name\":\"addSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"cancelMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"createMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destChain\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"executeMatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matchStatus\",\"outputs\":[{\"internalType\":\"enumSwapica.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"executedBy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originOrderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderStatus\",\"outputs\":[{\"internalType\":\"enumSwapica.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"executedBy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destChain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"}],\"name\":\"removeSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signaturesThreshold_\",\"type\":\"uint256\"}],\"name\":\"setSignaturesThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5060805161534361007b60003960008181610ad501528181610b6301528181610cef01528181610d7d015261104d01526153436000f3fe60806040526004361061014b5760003560e01c80638d361e43116100b6578063bf1fe08f1161006f578063bf1fe08f14610463578063bff494501461048c578063db20266f146104ca578063e8906a2d14610507578063f2fde38b14610530578063f7662788146105595761014b565b80638d361e431461034f5780638da5cb5b1461037857806394cf795e146103a357806396d4f640146103ce578063a85c38ef146103f7578063b925c02d1461043a5761014b565b80634768d4ef116101085780634768d4ef1461025d5780634f1ef2861461029f578063514fcac7146102bb57806352d1902d146102e4578063715018a61461030f57806386b2790c146103265761014b565b806309a558411461015057806314d41b451461017957806323d38621146101a25780632a9ff0d5146101e05780633659cfe61461020957806339ce73c714610232575b600080fd5b34801561015c57600080fd5b50610177600480360381019061017291906134b0565b610582565b005b34801561018557600080fd5b506101a0600480360381019061019b91906135bc565b6105f1565b005b3480156101ae57600080fd5b506101c960048036038101906101c4919061363d565b61083e565b6040516101d79291906136f0565b60405180910390f35b3480156101ec57600080fd5b50610207600480360381019061020291906135bc565b61086f565b005b34801561021557600080fd5b50610230600480360381019061022b9190613777565b610ad3565b005b34801561023e57600080fd5b50610247610c5b565b60405161025491906137a4565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f919061363d565b610c61565b604051610296969594939291906137ce565b60405180910390f35b6102b960048036038101906102b49190613970565b610ced565b005b3480156102c757600080fd5b506102e260048036038101906102dd919061363d565b610e29565b005b3480156102f057600080fd5b506102f9611049565b60405161030691906139e5565b60405180910390f35b34801561031b57600080fd5b50610324611102565b005b34801561033257600080fd5b5061034d60048036038101906103489190613a00565b61118a565b005b34801561035b57600080fd5b5061037660048036038101906103719190613a00565b611226565b005b34801561038457600080fd5b5061038d611304565b60405161039a9190613a4d565b60405180910390f35b3480156103af57600080fd5b506103b861132e565b6040516103c59190613b26565b60405180910390f35b3480156103da57600080fd5b506103f560048036038101906103f09190613b48565b61133f565b005b34801561040357600080fd5b5061041e6004803603810190610419919061363d565b61158f565b6040516104319796959493929190613bc3565b60405180910390f35b34801561044657600080fd5b50610461600480360381019061045c91906135bc565b611641565b005b34801561046f57600080fd5b5061048a6004803603810190610485919061363d565b61191f565b005b34801561049857600080fd5b506104b360048036038101906104ae919061363d565b6119e8565b6040516104c19291906136f0565b60405180910390f35b3480156104d657600080fd5b506104f160048036038101906104ec9190613c32565b611a19565b6040516104fe91906137a4565b60405180910390f35b34801561051357600080fd5b5061052e60048036038101906105299190613a00565b611a3e565b005b34801561053c57600080fd5b5061055760048036038101906105529190613777565b611bb2565b005b34801561056557600080fd5b50610580600480360381019061057b91906135bc565b611ca9565b005b600060019054906101000a900460ff166105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c890613cf5565b60405180910390fd5b6105d9611f5f565b6105e38383611a3e565b6105ec8161191f565b505050565b838383836106178484604051610608929190613d45565b60405180910390208383611fb8565b6000806000806000808d8d81019061062f9190613dc1565b9550955095509550955095506000600381111561064f5761064e61366a565b5b8660038111156106625761066161366a565b5b146106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069990613e9a565b60405180910390fd5b600160048111156106b6576106b561366a565b5b606a600085815260200190815260200160002060000160009054906101000a900460ff1660048111156106ec576106eb61366a565b5b146106f657600080fd5b6107008585612108565b60006068848154811061071657610715613eba565b5b906000526020600020906007020190506004606a600086815260200190815260200160002060000160006101000a81548160ff021916908360048111156107605761075f61366a565b5b021790555081606a600086815260200190815260200160002060010181905550606a60008581526020019081526020016000206040516107a09190613fd4565b6040518091039020847f73a9fddc811bd10d7714a344a6c50d5b982b2f9fae4b3c5bd76f0d01afe6d0b860405160405180910390a361082d8160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858460040154612185565b505050505050505050505050505050565b606b6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b838383836108958484604051610886929190613d45565b60405180910390208383611fb8565b60008060008060008c8c8101906108ac9190613fef565b945094509450945094506108c08484612108565b600160038111156108d4576108d361366a565b5b8560038111156108e7576108e661366a565b5b14610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90613e9a565b60405180910390fd5b6002600481111561093b5761093a61366a565b5b606b600084815260200190815260200160002060000160009054906101000a900460ff1660048111156109715761097061366a565b5b146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906140b6565b60405180910390fd5b6000606983815481106109c7576109c6613eba565b5b906000526020600020906006020190506004606b600085815260200190815260200160002060000160006101000a81548160ff02191690836004811115610a1157610a1061366a565b5b0217905550606b6000848152602001908152602001600020604051610a369190613fd4565b6040518091039020837fcbe9b920dc102a8df3c3c6ac1710e90d35d00308330e4f948c90f534fe87aff260405160405180910390a3610ac38160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848460040154612185565b5050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5890614148565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610ba0612229565b73ffffffffffffffffffffffffffffffffffffffff1614610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed906141da565b60405180910390fd5b610bff81612280565b610c5881600067ffffffffffffffff811115610c1e57610c1d613845565b5b6040519080825280601f01601f191660200182016040528015610c505781602001600182028036833780820191505090505b5060006122ff565b50565b60655481565b60698181548110610c7157600080fd5b90600052602060002090600602016000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154905086565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7290614148565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dba612229565b73ffffffffffffffffffffffffffffffffffffffff1614610e10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e07906141da565b60405180910390fd5b610e1982612280565b610e25828260016122ff565b5050565b600060688281548110610e3f57610e3e613eba565b5b9060005260206000209060070201905060016004811115610e6357610e6261366a565b5b606a600084815260200190815260200160002060000160009054906101000a900460ff166004811115610e9957610e9861366a565b5b14610ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed0906140b6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f3557600080fd5b6003606a600084815260200190815260200160002060000160006101000a81548160ff02191690836004811115610f6f57610f6e61366a565b5b0217905550606a6000838152602001908152602001600020604051610f949190613fd4565b6040518091039020827f73a9fddc811bd10d7714a344a6c50d5b982b2f9fae4b3c5bd76f0d01afe6d0b860405160405180910390a36110458160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460040154612185565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146110d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d09061426c565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b61110a61246d565b73ffffffffffffffffffffffffffffffffffffffff16611128611304565b73ffffffffffffffffffffffffffffffffffffffff161461117e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611175906142d8565b60405180910390fd5b6111886000612475565b565b6000611196600161253b565b905080156111ba576001600060016101000a81548160ff0219169083151502179055505b6111c8838385859050610582565b80156112215760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611218919061434a565b60405180910390a15b505050565b61122e61246d565b73ffffffffffffffffffffffffffffffffffffffff1661124c611304565b73ffffffffffffffffffffffffffffffffffffffff16146112a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611299906142d8565b60405180910390fd5b60005b828290508110156112ff576112eb8383838181106112c6576112c5613eba565b5b90506020020160208101906112db9190613777565b606661262b90919063ffffffff16565b5080806112f790614394565b9150506112a5565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606061133a606661265b565b905090565b6000606880549050905061135486338761267c565b6001606a600083815260200190815260200160002060000160006101000a81548160ff0219169083600481111561138e5761138d61366a565b5b0217905550606a60008281526020019081526020016000206040516113b39190613fd4565b6040518091039020817f73a9fddc811bd10d7714a344a6c50d5b982b2f9fae4b3c5bd76f0d01afe6d0b860405160405180910390a360686040518060e001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018581526020018481525090806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c082015181600601555050505050505050565b6068818154811061159f57600080fd5b90600052602060002090600702016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154908060060154905087565b838383836116678484604051611658929190613d45565b60405180910390208383611fb8565b6000806000808b8b81019061167c91906143dc565b93509350935093506003808111156116975761169661366a565b5b8460038111156116aa576116a961366a565b5b146116ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e190613e9a565b60405180910390fd5b6116f48383612108565b600260048111156117085761170761366a565b5b606b600083815260200190815260200160002060000160009054906101000a900460ff16600481111561173e5761173d61366a565b5b1461177e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611775906140b6565b60405180910390fd5b60006069828154811061179457611793613eba565b5b906000526020600020906006020190503373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461180057600080fd5b6003606b600084815260200190815260200160002060000160006101000a81548160ff0219169083600481111561183a5761183961366a565b5b0217905550606b600083815260200190815260200160002060405161185f9190613fd4565b6040518091039020827fcbe9b920dc102a8df3c3c6ac1710e90d35d00308330e4f948c90f534fe87aff260405160405180910390a36119108160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460040154612185565b50505050505050505050505050565b61192761246d565b73ffffffffffffffffffffffffffffffffffffffff16611945611304565b73ffffffffffffffffffffffffffffffffffffffff161461199b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611992906142d8565b60405180910390fd5b600081116119de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d59061448f565b60405180910390fd5b8060658190555050565b606a6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b606c602052816000526040600020602052806000526040600020600091509150505481565b611a4661246d565b73ffffffffffffffffffffffffffffffffffffffff16611a64611304565b73ffffffffffffffffffffffffffffffffffffffff1614611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab1906142d8565b60405180910390fd5b60005b82829050811015611bad57600073ffffffffffffffffffffffffffffffffffffffff16838383818110611af357611af2613eba565b5b9050602002016020810190611b089190613777565b73ffffffffffffffffffffffffffffffffffffffff1603611b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b55906144fb565b60405180910390fd5b611b99838383818110611b7457611b73613eba565b5b9050602002016020810190611b899190613777565b606661272090919063ffffffff16565b508080611ba590614394565b915050611abd565b505050565b611bba61246d565b73ffffffffffffffffffffffffffffffffffffffff16611bd8611304565b73ffffffffffffffffffffffffffffffffffffffff1614611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c25906142d8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c949061458d565b60405180910390fd5b611ca681612475565b50565b83838383611ccf8484604051611cc0929190613d45565b60405180910390208383611fb8565b60008060008060008060008e8e810190611ce991906145ad565b965096509650965096509650965060026003811115611d0b57611d0a61366a565b5b876003811115611d1e57611d1d61366a565b5b14611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5590613e9a565b60405180910390fd5b611d688686612108565b611d7383338461267c565b6000606980549050905060696040518060c001604052808381526020018781526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152509080600181540180825580915050600190039060005260206000209060060201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015550506002606b600083815260200190815260200160002060000160006101000a81548160ff02191690836004811115611ef357611ef261366a565b5b0217905550606b6000828152602001908152602001600020604051611f189190613fd4565b6040518091039020817fcbe9b920dc102a8df3c3c6ac1710e90d35d00308330e4f948c90f534fe87aff260405160405180910390a350505050505050505050505050505050565b600060019054906101000a900460ff16611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590613cf5565b60405180910390fd5b611fb6612750565b565b60008282905067ffffffffffffffff811115611fd757611fd6613845565b5b6040519080825280602002602001820160405280156120055781602001602082028036833780820191505090505b50905060005b838390508110156120f85761209884848381811061202c5761202b613eba565b5b905060200281019061203e919061465e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061208a876127b1565b6127e190919063ffffffff16565b8282815181106120ab576120aa613eba565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806120f090614394565b91505061200b565b5061210281612808565b50505050565b814614801561214257508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16145b612181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121789061470d565b60405180910390fd5b5050565b80606c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612211919061472d565b92505081905550612223848383612974565b50505050565b60006122577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6129fa565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61228861246d565b73ffffffffffffffffffffffffffffffffffffffff166122a6611304565b73ffffffffffffffffffffffffffffffffffffffff16146122fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f3906142d8565b60405180910390fd5b50565b61232b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612a04565b60000160009054906101000a900460ff161561234f5761234a83612a0e565b612468565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156123b757506040513d601f19601f820116820180604052508101906123b4919061478d565b60015b6123f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ed9061482c565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461245b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612452906148be565b60405180910390fd5b50612467838383612ac7565b5b505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156125b25760018260ff1614801561256a575061256830612af3565b155b6125a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a090614950565b60405180910390fd5b60009050612626565b8160ff1660008054906101000a900460ff1660ff1610612607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fe90614950565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6000612653836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b16565b905092915050565b6060600061266b83600001612c2a565b905060608190508092505050919050565b80606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127089190614970565b9250508190555061271b83833084612c86565b505050565b6000612748836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d0f565b905092915050565b600060019054906101000a900460ff1661279f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279690613cf5565b60405180910390fd5b6127af6127aa61246d565b612475565b565b6000816040516020016127c49190614a3e565b604051602081830303815290604052805190602001209050919050565b60008060006127f08585612d7f565b915091506127fd81612dd0565b819250505092915050565b600080600090505b82518110156129295761284783828151811061282f5761282e613eba565b5b60200260200101516066612f3690919063ffffffff16565b612886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287d90614ab0565b60405180910390fd5b6000609884838151811061289d5761289c613eba565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16901c60026128c99190614c03565b9050600081841614612910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290790614c9a565b60405180910390fd5b808317925050808061292190614394565b915050612810565b5060655482511015612970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296790614d06565b60405180910390fd5b5050565b6129f58363a9059cbb60e01b8484604051602401612993929190614d26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f66565b505050565b6000819050919050565b6000819050919050565b612a178161302d565b612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d90614dc1565b60405180910390fd5b80612a837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6129fa565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612ad083613050565b600082511180612add5750805b15612aee57612aec838361309f565b505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008083600101600084815260200190815260200160002054905060008114612c1e576000600182612b48919061472d565b9050600060018660000180549050612b60919061472d565b9050818114612bcf576000866000018281548110612b8157612b80613eba565b5b9060005260206000200154905080876000018481548110612ba557612ba4613eba565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612be357612be2614de1565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612c24565b60009150505b92915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612c7a57602002820191906000526020600020905b815481526020019060010190808311612c66575b50505050509050919050565b612d09846323b872dd60e01b858585604051602401612ca793929190614e10565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f66565b50505050565b6000612d1b83836130cc565b612d74578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612d79565b600090505b92915050565b6000806041835103612dc05760008060006020860151925060408601519150606086015160001a9050612db4878285856130ef565b94509450505050612dc9565b60006002915091505b9250929050565b60006004811115612de457612de361366a565b5b816004811115612df757612df661366a565b5b0315612f335760016004811115612e1157612e1061366a565b5b816004811115612e2457612e2361366a565b5b03612e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5b90614e93565b60405180910390fd5b60026004811115612e7857612e7761366a565b5b816004811115612e8b57612e8a61366a565b5b03612ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec290614eff565b60405180910390fd5b60036004811115612edf57612ede61366a565b5b816004811115612ef257612ef161366a565b5b03612f32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2990614f91565b60405180910390fd5b5b50565b6000612f5e836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6130cc565b905092915050565b6000612fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131d19092919063ffffffff16565b90506000815111156130285780806020019051810190612fe89190614fe9565b613027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301e90615088565b60405180910390fd5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61305981612a0e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606130c483836040518060600160405280602781526020016152e7602791396131e9565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561312a5760006003915091506131c8565b60006001878787876040516000815260200160405260405161314f94939291906150b7565b6020604051602081039080840390855afa158015613171573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036131bf576000600192509250506131c8565b80600092509250505b94509492505050565b60606131e0848460008561326f565b90509392505050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051613213919061516b565b600060405180830381855af49150503d806000811461324e576040519150601f19603f3d011682016040523d82523d6000602084013e613253565b606091505b50915091506132648683838761333c565b925050509392505050565b6060824710156132b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ab906151f4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516132dd919061516b565b60006040518083038185875af1925050503d806000811461331a576040519150601f19603f3d011682016040523d82523d6000602084013e61331f565b606091505b50915091506133308783838761333c565b92505050949350505050565b6060831561339e576000835103613396576133568561302d565b613395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338c90615260565b60405180910390fd5b5b8290506133a9565b6133a883836133b1565b5b949350505050565b6000825111156133c45781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133f891906152c4565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261343a57613439613415565b5b8235905067ffffffffffffffff8111156134575761345661341a565b5b6020830191508360208202830111156134735761347261341f565b5b9250929050565b6000819050919050565b61348d8161347a565b811461349857600080fd5b50565b6000813590506134aa81613484565b92915050565b6000806000604084860312156134c9576134c861340b565b5b600084013567ffffffffffffffff8111156134e7576134e6613410565b5b6134f386828701613424565b935093505060206135068682870161349b565b9150509250925092565b60008083601f84011261352657613525613415565b5b8235905067ffffffffffffffff8111156135435761354261341a565b5b60208301915083600182028301111561355f5761355e61341f565b5b9250929050565b60008083601f84011261357c5761357b613415565b5b8235905067ffffffffffffffff8111156135995761359861341a565b5b6020830191508360208202830111156135b5576135b461341f565b5b9250929050565b600080600080604085870312156135d6576135d561340b565b5b600085013567ffffffffffffffff8111156135f4576135f3613410565b5b61360087828801613510565b9450945050602085013567ffffffffffffffff81111561362357613622613410565b5b61362f87828801613566565b925092505092959194509250565b6000602082840312156136535761365261340b565b5b60006136618482850161349b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106136aa576136a961366a565b5b50565b60008190506136bb82613699565b919050565b60006136cb826136ad565b9050919050565b6136db816136c0565b82525050565b6136ea8161347a565b82525050565b600060408201905061370560008301856136d2565b61371260208301846136e1565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061374482613719565b9050919050565b61375481613739565b811461375f57600080fd5b50565b6000813590506137718161374b565b92915050565b60006020828403121561378d5761378c61340b565b5b600061379b84828501613762565b91505092915050565b60006020820190506137b960008301846136e1565b92915050565b6137c881613739565b82525050565b600060c0820190506137e360008301896136e1565b6137f060208301886136e1565b6137fd60408301876137bf565b61380a60608301866137bf565b61381760808301856136e1565b61382460a08301846136e1565b979650505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61387d82613834565b810181811067ffffffffffffffff8211171561389c5761389b613845565b5b80604052505050565b60006138af613401565b90506138bb8282613874565b919050565b600067ffffffffffffffff8211156138db576138da613845565b5b6138e482613834565b9050602081019050919050565b82818337600083830152505050565b600061391361390e846138c0565b6138a5565b90508281526020810184848401111561392f5761392e61382f565b5b61393a8482856138f1565b509392505050565b600082601f83011261395757613956613415565b5b8135613967848260208601613900565b91505092915050565b600080604083850312156139875761398661340b565b5b600061399585828601613762565b925050602083013567ffffffffffffffff8111156139b6576139b5613410565b5b6139c285828601613942565b9150509250929050565b6000819050919050565b6139df816139cc565b82525050565b60006020820190506139fa60008301846139d6565b92915050565b60008060208385031215613a1757613a1661340b565b5b600083013567ffffffffffffffff811115613a3557613a34613410565b5b613a4185828601613424565b92509250509250929050565b6000602082019050613a6260008301846137bf565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a9d81613739565b82525050565b6000613aaf8383613a94565b60208301905092915050565b6000602082019050919050565b6000613ad382613a68565b613add8185613a73565b9350613ae883613a84565b8060005b83811015613b19578151613b008882613aa3565b9750613b0b83613abb565b925050600181019050613aec565b5085935050505092915050565b60006020820190508181036000830152613b408184613ac8565b905092915050565b600080600080600060a08688031215613b6457613b6361340b565b5b6000613b7288828901613762565b9550506020613b838882890161349b565b9450506040613b9488828901613762565b9350506060613ba58882890161349b565b9250506080613bb68882890161349b565b9150509295509295909350565b600060e082019050613bd8600083018a6136e1565b613be560208301896137bf565b613bf260408301886137bf565b613bff60608301876137bf565b613c0c60808301866136e1565b613c1960a08301856136e1565b613c2660c08301846136e1565b98975050505050505050565b60008060408385031215613c4957613c4861340b565b5b6000613c5785828601613762565b9250506020613c6885828601613762565b9150509250929050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613cdf602b83613c72565b9150613cea82613c83565b604082019050919050565b60006020820190508181036000830152613d0e81613cd2565b9050919050565b600081905092915050565b6000613d2c8385613d15565b9350613d398385846138f1565b82840190509392505050565b6000613d52828486613d20565b91508190509392505050565b60048110613d6b57600080fd5b50565b600081359050613d7d81613d5e565b92915050565b6000613d8e82613719565b9050919050565b613d9e81613d83565b8114613da957600080fd5b50565b600081359050613dbb81613d95565b92915050565b60008060008060008060c08789031215613dde57613ddd61340b565b5b6000613dec89828a01613d6e565b9650506020613dfd89828a0161349b565b9550506040613e0e89828a01613dac565b9450506060613e1f89828a0161349b565b9350506080613e3089828a01613dac565b92505060a0613e4189828a0161349b565b9150509295509295509295565b7f57726f6e672053656c6563746f72000000000000000000000000000000000000600082015250565b6000613e84600e83613c72565b9150613e8f82613e4e565b602082019050919050565b60006020820190508181036000830152613eb381613e77565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160001c9050919050565b600060ff82169050919050565b6000613f16613f1183613ee9565b613ef6565b9050919050565b613f26816136c0565b82525050565b6000613f388383613f1d565b60208301905092915050565b6000819050919050565b6000613f61613f5c83613ee9565b613f44565b9050919050565b613f718161347a565b82525050565b6000613f838383613f68565b60208301905092915050565b600082016000808301549050613fa481613f03565b613fae8582613f2c565b94505060018301549050613fc181613f4e565b613fcb8582613f77565b94505050505050565b6000613fe08284613f8f565b60408201915081905092915050565b600080600080600060a0868803121561400b5761400a61340b565b5b600061401988828901613d6e565b955050602061402a8882890161349b565b945050604061403b88828901613dac565b935050606061404c8882890161349b565b925050608061405d88828901613dac565b9150509295509295909350565b7f4f72646572207374617475732069732077726f6e670000000000000000000000600082015250565b60006140a0601583613c72565b91506140ab8261406a565b602082019050919050565b600060208201905081810360008301526140cf81614093565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614132602c83613c72565b915061413d826140d6565b604082019050919050565b6000602082019050818103600083015261416181614125565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006141c4602c83613c72565b91506141cf82614168565b604082019050919050565b600060208201905081810360008301526141f3816141b7565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000614256603883613c72565b9150614261826141fa565b604082019050919050565b6000602082019050818103600083015261428581614249565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006142c2602083613c72565b91506142cd8261428c565b602082019050919050565b600060208201905081810360008301526142f1816142b5565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061433461432f61432a846142f8565b61430f565b614302565b9050919050565b61434481614319565b82525050565b600060208201905061435f600083018461433b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061439f8261347a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036143d1576143d0614365565b5b600182019050919050565b600080600080608085870312156143f6576143f561340b565b5b600061440487828801613d6e565b94505060206144158782880161349b565b935050604061442687828801613dac565b92505060606144378782880161349b565b91505092959194509250565b7f5369676e6572733a20696e76616c6964207468726573686f6c64000000000000600082015250565b6000614479601a83613c72565b915061448482614443565b602082019050919050565b600060208201905081810360008301526144a88161446c565b9050919050565b7f5369676e6572733a207a65726f207369676e6572000000000000000000000000600082015250565b60006144e5601483613c72565b91506144f0826144af565b602082019050919050565b60006020820190508181036000830152614514816144d8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614577602683613c72565b91506145828261451b565b604082019050919050565b600060208201905081810360008301526145a68161456a565b9050919050565b600080600080600080600060e0888a0312156145cc576145cb61340b565b5b60006145da8a828b01613d6e565b97505060206145eb8a828b0161349b565b96505060406145fc8a828b01613dac565b955050606061460d8a828b0161349b565b945050608061461e8a828b01613dac565b93505060a061462f8a828b0161349b565b92505060c06146408a828b0161349b565b91505092959891949750929550565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261467b5761467a61464f565b5b80840192508235915067ffffffffffffffff82111561469d5761469c614654565b5b6020830192506001820236038313156146b9576146b8614659565b5b509250929050565b7f57726f6e67205369676e617475726520526563697069656e7400000000000000600082015250565b60006146f7601983613c72565b9150614702826146c1565b602082019050919050565b60006020820190508181036000830152614726816146ea565b9050919050565b60006147388261347a565b91506147438361347a565b92508282101561475657614755614365565b5b828203905092915050565b61476a816139cc565b811461477557600080fd5b50565b60008151905061478781614761565b92915050565b6000602082840312156147a3576147a261340b565b5b60006147b184828501614778565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614816602e83613c72565b9150614821826147ba565b604082019050919050565b6000602082019050818103600083015261484581614809565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006148a8602983613c72565b91506148b38261484c565b604082019050919050565b600060208201905081810360008301526148d78161489b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061493a602e83613c72565b9150614945826148de565b604082019050919050565b600060208201905081810360008301526149698161492d565b9050919050565b600061497b8261347a565b91506149868361347a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149bb576149ba614365565b5b828201905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000614a07601c836149c6565b9150614a12826149d1565b601c82019050919050565b6000819050919050565b614a38614a33826139cc565b614a1d565b82525050565b6000614a49826149fa565b9150614a558284614a27565b60208201915081905092915050565b7f5369676e6572733a20696e76616c6964207369676e6572000000000000000000600082015250565b6000614a9a601783613c72565b9150614aa582614a64565b602082019050919050565b60006020820190508181036000830152614ac981614a8d565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115614b2757808604811115614b0357614b02614365565b5b6001851615614b125780820291505b8081029050614b2085614ad0565b9450614ae7565b94509492505050565b600082614b405760019050614bfc565b81614b4e5760009050614bfc565b8160018114614b645760028114614b6e57614b9d565b6001915050614bfc565b60ff841115614b8057614b7f614365565b5b8360020a915084821115614b9757614b96614365565b5b50614bfc565b5060208310610133831016604e8410600b8410161715614bd25782820a905083811115614bcd57614bcc614365565b5b614bfc565b614bdf8484846001614add565b92509050818404811115614bf657614bf5614365565b5b81810290505b9392505050565b6000614c0e8261347a565b9150614c198361347a565b9250614c467fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614b30565b905092915050565b7f5369676e6572733a206475706c6963617465207369676e657273000000000000600082015250565b6000614c84601a83613c72565b9150614c8f82614c4e565b602082019050919050565b60006020820190508181036000830152614cb381614c77565b9050919050565b7f5369676e6572733a207468726573686f6c64206973206e6f74206d6574000000600082015250565b6000614cf0601d83613c72565b9150614cfb82614cba565b602082019050919050565b60006020820190508181036000830152614d1f81614ce3565b9050919050565b6000604082019050614d3b60008301856137bf565b614d4860208301846136e1565b9392505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614dab602d83613c72565b9150614db682614d4f565b604082019050919050565b60006020820190508181036000830152614dda81614d9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000606082019050614e2560008301866137bf565b614e3260208301856137bf565b614e3f60408301846136e1565b949350505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000614e7d601883613c72565b9150614e8882614e47565b602082019050919050565b60006020820190508181036000830152614eac81614e70565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000614ee9601f83613c72565b9150614ef482614eb3565b602082019050919050565b60006020820190508181036000830152614f1881614edc565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000614f7b602283613c72565b9150614f8682614f1f565b604082019050919050565b60006020820190508181036000830152614faa81614f6e565b9050919050565b60008115159050919050565b614fc681614fb1565b8114614fd157600080fd5b50565b600081519050614fe381614fbd565b92915050565b600060208284031215614fff57614ffe61340b565b5b600061500d84828501614fd4565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615072602a83613c72565b915061507d82615016565b604082019050919050565b600060208201905081810360008301526150a181615065565b9050919050565b6150b181614302565b82525050565b60006080820190506150cc60008301876139d6565b6150d960208301866150a8565b6150e660408301856139d6565b6150f360608301846139d6565b95945050505050565b600081519050919050565b60005b8381101561512557808201518184015260208101905061510a565b83811115615134576000848401525b50505050565b6000615145826150fc565b61514f8185613d15565b935061515f818560208601615107565b80840191505092915050565b6000615177828461513a565b915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006151de602683613c72565b91506151e982615182565b604082019050919050565b6000602082019050818103600083015261520d816151d1565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061524a601d83613c72565b915061525582615214565b602082019050919050565b600060208201905081810360008301526152798161523d565b9050919050565b600081519050919050565b600061529682615280565b6152a08185613c72565b93506152b0818560208601615107565b6152b981613834565b840191505092915050565b600060208201905081810360008301526152de818461528b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208fc43dd7c91956ea167d31d304a4e085e215e17fa55808b9bc616c165708793b64736f6c634300080f0033",
}

// SwapicaABI is the input ABI used to generate the binding from.
// Deprecated: Use SwapicaMetaData.ABI instead.
var SwapicaABI = SwapicaMetaData.ABI

// SwapicaBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SwapicaMetaData.Bin instead.
var SwapicaBin = SwapicaMetaData.Bin

// DeploySwapica deploys a new Ethereum contract, binding an instance of Swapica to it.
func DeploySwapica(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Swapica, error) {
	parsed, err := SwapicaMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SwapicaBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swapica{SwapicaCaller: SwapicaCaller{contract: contract}, SwapicaTransactor: SwapicaTransactor{contract: contract}, SwapicaFilterer: SwapicaFilterer{contract: contract}}, nil
}

// Swapica is an auto generated Go binding around an Ethereum contract.
type Swapica struct {
	SwapicaCaller     // Read-only binding to the contract
	SwapicaTransactor // Write-only binding to the contract
	SwapicaFilterer   // Log filterer for contract events
}

// SwapicaCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwapicaCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwapicaTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwapicaTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwapicaFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwapicaFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwapicaSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwapicaSession struct {
	Contract     *Swapica          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwapicaCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwapicaCallerSession struct {
	Contract *SwapicaCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SwapicaTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwapicaTransactorSession struct {
	Contract     *SwapicaTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SwapicaRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwapicaRaw struct {
	Contract *Swapica // Generic contract binding to access the raw methods on
}

// SwapicaCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwapicaCallerRaw struct {
	Contract *SwapicaCaller // Generic read-only contract binding to access the raw methods on
}

// SwapicaTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwapicaTransactorRaw struct {
	Contract *SwapicaTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwapica creates a new instance of Swapica, bound to a specific deployed contract.
func NewSwapica(address common.Address, backend bind.ContractBackend) (*Swapica, error) {
	contract, err := bindSwapica(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swapica{SwapicaCaller: SwapicaCaller{contract: contract}, SwapicaTransactor: SwapicaTransactor{contract: contract}, SwapicaFilterer: SwapicaFilterer{contract: contract}}, nil
}

// NewSwapicaCaller creates a new read-only instance of Swapica, bound to a specific deployed contract.
func NewSwapicaCaller(address common.Address, caller bind.ContractCaller) (*SwapicaCaller, error) {
	contract, err := bindSwapica(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwapicaCaller{contract: contract}, nil
}

// NewSwapicaTransactor creates a new write-only instance of Swapica, bound to a specific deployed contract.
func NewSwapicaTransactor(address common.Address, transactor bind.ContractTransactor) (*SwapicaTransactor, error) {
	contract, err := bindSwapica(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwapicaTransactor{contract: contract}, nil
}

// NewSwapicaFilterer creates a new log filterer instance of Swapica, bound to a specific deployed contract.
func NewSwapicaFilterer(address common.Address, filterer bind.ContractFilterer) (*SwapicaFilterer, error) {
	contract, err := bindSwapica(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwapicaFilterer{contract: contract}, nil
}

// bindSwapica binds a generic wrapper to an already deployed contract.
func bindSwapica(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwapicaABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swapica *SwapicaRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swapica.Contract.SwapicaCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swapica *SwapicaRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swapica.Contract.SwapicaTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swapica *SwapicaRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swapica.Contract.SwapicaTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swapica *SwapicaCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swapica.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swapica *SwapicaTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swapica.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swapica *SwapicaTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swapica.Contract.contract.Transact(opts, method, params...)
}

// GetSigners is a free data retrieval call binding the contract method 0x94cf795e.
//
// Solidity: function getSigners() view returns(address[])
func (_Swapica *SwapicaCaller) GetSigners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "getSigners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetSigners is a free data retrieval call binding the contract method 0x94cf795e.
//
// Solidity: function getSigners() view returns(address[])
func (_Swapica *SwapicaSession) GetSigners() ([]common.Address, error) {
	return _Swapica.Contract.GetSigners(&_Swapica.CallOpts)
}

// GetSigners is a free data retrieval call binding the contract method 0x94cf795e.
//
// Solidity: function getSigners() view returns(address[])
func (_Swapica *SwapicaCallerSession) GetSigners() ([]common.Address, error) {
	return _Swapica.Contract.GetSigners(&_Swapica.CallOpts)
}

// Locked is a free data retrieval call binding the contract method 0xdb20266f.
//
// Solidity: function locked(address , address ) view returns(uint256)
func (_Swapica *SwapicaCaller) Locked(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "locked", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Locked is a free data retrieval call binding the contract method 0xdb20266f.
//
// Solidity: function locked(address , address ) view returns(uint256)
func (_Swapica *SwapicaSession) Locked(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Swapica.Contract.Locked(&_Swapica.CallOpts, arg0, arg1)
}

// Locked is a free data retrieval call binding the contract method 0xdb20266f.
//
// Solidity: function locked(address , address ) view returns(uint256)
func (_Swapica *SwapicaCallerSession) Locked(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Swapica.Contract.Locked(&_Swapica.CallOpts, arg0, arg1)
}

// MatchStatus is a free data retrieval call binding the contract method 0x23d38621.
//
// Solidity: function matchStatus(uint256 ) view returns(uint8 state, uint256 executedBy)
func (_Swapica *SwapicaCaller) MatchStatus(opts *bind.CallOpts, arg0 *big.Int) (struct {
	State      uint8
	ExecutedBy *big.Int
}, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "matchStatus", arg0)

	outstruct := new(struct {
		State      uint8
		ExecutedBy *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.State = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.ExecutedBy = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// MatchStatus is a free data retrieval call binding the contract method 0x23d38621.
//
// Solidity: function matchStatus(uint256 ) view returns(uint8 state, uint256 executedBy)
func (_Swapica *SwapicaSession) MatchStatus(arg0 *big.Int) (struct {
	State      uint8
	ExecutedBy *big.Int
}, error) {
	return _Swapica.Contract.MatchStatus(&_Swapica.CallOpts, arg0)
}

// MatchStatus is a free data retrieval call binding the contract method 0x23d38621.
//
// Solidity: function matchStatus(uint256 ) view returns(uint8 state, uint256 executedBy)
func (_Swapica *SwapicaCallerSession) MatchStatus(arg0 *big.Int) (struct {
	State      uint8
	ExecutedBy *big.Int
}, error) {
	return _Swapica.Contract.MatchStatus(&_Swapica.CallOpts, arg0)
}

// Matches is a free data retrieval call binding the contract method 0x4768d4ef.
//
// Solidity: function matches(uint256 ) view returns(uint256 id, uint256 originOrderId, address account, address tokenToSell, uint256 amountToSell, uint256 originChain)
func (_Swapica *SwapicaCaller) Matches(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id            *big.Int
	OriginOrderId *big.Int
	Account       common.Address
	TokenToSell   common.Address
	AmountToSell  *big.Int
	OriginChain   *big.Int
}, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "matches", arg0)

	outstruct := new(struct {
		Id            *big.Int
		OriginOrderId *big.Int
		Account       common.Address
		TokenToSell   common.Address
		AmountToSell  *big.Int
		OriginChain   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.OriginOrderId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Account = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.TokenToSell = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.AmountToSell = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.OriginChain = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Matches is a free data retrieval call binding the contract method 0x4768d4ef.
//
// Solidity: function matches(uint256 ) view returns(uint256 id, uint256 originOrderId, address account, address tokenToSell, uint256 amountToSell, uint256 originChain)
func (_Swapica *SwapicaSession) Matches(arg0 *big.Int) (struct {
	Id            *big.Int
	OriginOrderId *big.Int
	Account       common.Address
	TokenToSell   common.Address
	AmountToSell  *big.Int
	OriginChain   *big.Int
}, error) {
	return _Swapica.Contract.Matches(&_Swapica.CallOpts, arg0)
}

// Matches is a free data retrieval call binding the contract method 0x4768d4ef.
//
// Solidity: function matches(uint256 ) view returns(uint256 id, uint256 originOrderId, address account, address tokenToSell, uint256 amountToSell, uint256 originChain)
func (_Swapica *SwapicaCallerSession) Matches(arg0 *big.Int) (struct {
	Id            *big.Int
	OriginOrderId *big.Int
	Account       common.Address
	TokenToSell   common.Address
	AmountToSell  *big.Int
	OriginChain   *big.Int
}, error) {
	return _Swapica.Contract.Matches(&_Swapica.CallOpts, arg0)
}

// OrderStatus is a free data retrieval call binding the contract method 0xbff49450.
//
// Solidity: function orderStatus(uint256 ) view returns(uint8 state, uint256 executedBy)
func (_Swapica *SwapicaCaller) OrderStatus(opts *bind.CallOpts, arg0 *big.Int) (struct {
	State      uint8
	ExecutedBy *big.Int
}, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "orderStatus", arg0)

	outstruct := new(struct {
		State      uint8
		ExecutedBy *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.State = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.ExecutedBy = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OrderStatus is a free data retrieval call binding the contract method 0xbff49450.
//
// Solidity: function orderStatus(uint256 ) view returns(uint8 state, uint256 executedBy)
func (_Swapica *SwapicaSession) OrderStatus(arg0 *big.Int) (struct {
	State      uint8
	ExecutedBy *big.Int
}, error) {
	return _Swapica.Contract.OrderStatus(&_Swapica.CallOpts, arg0)
}

// OrderStatus is a free data retrieval call binding the contract method 0xbff49450.
//
// Solidity: function orderStatus(uint256 ) view returns(uint8 state, uint256 executedBy)
func (_Swapica *SwapicaCallerSession) OrderStatus(arg0 *big.Int) (struct {
	State      uint8
	ExecutedBy *big.Int
}, error) {
	return _Swapica.Contract.OrderStatus(&_Swapica.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0xa85c38ef.
//
// Solidity: function orders(uint256 ) view returns(uint256 id, address account, address tokenToSell, address tokenToBuy, uint256 amountToSell, uint256 amountToBuy, uint256 destChain)
func (_Swapica *SwapicaCaller) Orders(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id           *big.Int
	Account      common.Address
	TokenToSell  common.Address
	TokenToBuy   common.Address
	AmountToSell *big.Int
	AmountToBuy  *big.Int
	DestChain    *big.Int
}, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "orders", arg0)

	outstruct := new(struct {
		Id           *big.Int
		Account      common.Address
		TokenToSell  common.Address
		TokenToBuy   common.Address
		AmountToSell *big.Int
		AmountToBuy  *big.Int
		DestChain    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Account = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.TokenToSell = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.TokenToBuy = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.AmountToSell = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.AmountToBuy = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.DestChain = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Orders is a free data retrieval call binding the contract method 0xa85c38ef.
//
// Solidity: function orders(uint256 ) view returns(uint256 id, address account, address tokenToSell, address tokenToBuy, uint256 amountToSell, uint256 amountToBuy, uint256 destChain)
func (_Swapica *SwapicaSession) Orders(arg0 *big.Int) (struct {
	Id           *big.Int
	Account      common.Address
	TokenToSell  common.Address
	TokenToBuy   common.Address
	AmountToSell *big.Int
	AmountToBuy  *big.Int
	DestChain    *big.Int
}, error) {
	return _Swapica.Contract.Orders(&_Swapica.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0xa85c38ef.
//
// Solidity: function orders(uint256 ) view returns(uint256 id, address account, address tokenToSell, address tokenToBuy, uint256 amountToSell, uint256 amountToBuy, uint256 destChain)
func (_Swapica *SwapicaCallerSession) Orders(arg0 *big.Int) (struct {
	Id           *big.Int
	Account      common.Address
	TokenToSell  common.Address
	TokenToBuy   common.Address
	AmountToSell *big.Int
	AmountToBuy  *big.Int
	DestChain    *big.Int
}, error) {
	return _Swapica.Contract.Orders(&_Swapica.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Swapica *SwapicaCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Swapica *SwapicaSession) Owner() (common.Address, error) {
	return _Swapica.Contract.Owner(&_Swapica.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Swapica *SwapicaCallerSession) Owner() (common.Address, error) {
	return _Swapica.Contract.Owner(&_Swapica.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Swapica *SwapicaCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Swapica *SwapicaSession) ProxiableUUID() ([32]byte, error) {
	return _Swapica.Contract.ProxiableUUID(&_Swapica.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Swapica *SwapicaCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Swapica.Contract.ProxiableUUID(&_Swapica.CallOpts)
}

// SignaturesThreshold is a free data retrieval call binding the contract method 0x39ce73c7.
//
// Solidity: function signaturesThreshold() view returns(uint256)
func (_Swapica *SwapicaCaller) SignaturesThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swapica.contract.Call(opts, &out, "signaturesThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SignaturesThreshold is a free data retrieval call binding the contract method 0x39ce73c7.
//
// Solidity: function signaturesThreshold() view returns(uint256)
func (_Swapica *SwapicaSession) SignaturesThreshold() (*big.Int, error) {
	return _Swapica.Contract.SignaturesThreshold(&_Swapica.CallOpts)
}

// SignaturesThreshold is a free data retrieval call binding the contract method 0x39ce73c7.
//
// Solidity: function signaturesThreshold() view returns(uint256)
func (_Swapica *SwapicaCallerSession) SignaturesThreshold() (*big.Int, error) {
	return _Swapica.Contract.SignaturesThreshold(&_Swapica.CallOpts)
}

// SignersInit is a paid mutator transaction binding the contract method 0x09a55841.
//
// Solidity: function __Signers_init(address[] signers_, uint256 signaturesThreshold_) returns()
func (_Swapica *SwapicaTransactor) SignersInit(opts *bind.TransactOpts, signers_ []common.Address, signaturesThreshold_ *big.Int) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "__Signers_init", signers_, signaturesThreshold_)
}

// SignersInit is a paid mutator transaction binding the contract method 0x09a55841.
//
// Solidity: function __Signers_init(address[] signers_, uint256 signaturesThreshold_) returns()
func (_Swapica *SwapicaSession) SignersInit(signers_ []common.Address, signaturesThreshold_ *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.SignersInit(&_Swapica.TransactOpts, signers_, signaturesThreshold_)
}

// SignersInit is a paid mutator transaction binding the contract method 0x09a55841.
//
// Solidity: function __Signers_init(address[] signers_, uint256 signaturesThreshold_) returns()
func (_Swapica *SwapicaTransactorSession) SignersInit(signers_ []common.Address, signaturesThreshold_ *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.SignersInit(&_Swapica.TransactOpts, signers_, signaturesThreshold_)
}

// SwapicaInit is a paid mutator transaction binding the contract method 0x86b2790c.
//
// Solidity: function __Swapica_init(address[] signers) returns()
func (_Swapica *SwapicaTransactor) SwapicaInit(opts *bind.TransactOpts, signers []common.Address) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "__Swapica_init", signers)
}

// SwapicaInit is a paid mutator transaction binding the contract method 0x86b2790c.
//
// Solidity: function __Swapica_init(address[] signers) returns()
func (_Swapica *SwapicaSession) SwapicaInit(signers []common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.SwapicaInit(&_Swapica.TransactOpts, signers)
}

// SwapicaInit is a paid mutator transaction binding the contract method 0x86b2790c.
//
// Solidity: function __Swapica_init(address[] signers) returns()
func (_Swapica *SwapicaTransactorSession) SwapicaInit(signers []common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.SwapicaInit(&_Swapica.TransactOpts, signers)
}

// AddSigners is a paid mutator transaction binding the contract method 0xe8906a2d.
//
// Solidity: function addSigners(address[] signers_) returns()
func (_Swapica *SwapicaTransactor) AddSigners(opts *bind.TransactOpts, signers_ []common.Address) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "addSigners", signers_)
}

// AddSigners is a paid mutator transaction binding the contract method 0xe8906a2d.
//
// Solidity: function addSigners(address[] signers_) returns()
func (_Swapica *SwapicaSession) AddSigners(signers_ []common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.AddSigners(&_Swapica.TransactOpts, signers_)
}

// AddSigners is a paid mutator transaction binding the contract method 0xe8906a2d.
//
// Solidity: function addSigners(address[] signers_) returns()
func (_Swapica *SwapicaTransactorSession) AddSigners(signers_ []common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.AddSigners(&_Swapica.TransactOpts, signers_)
}

// CancelMatch is a paid mutator transaction binding the contract method 0xb925c02d.
//
// Solidity: function cancelMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactor) CancelMatch(opts *bind.TransactOpts, orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "cancelMatch", orderData, signatures)
}

// CancelMatch is a paid mutator transaction binding the contract method 0xb925c02d.
//
// Solidity: function cancelMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaSession) CancelMatch(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.CancelMatch(&_Swapica.TransactOpts, orderData, signatures)
}

// CancelMatch is a paid mutator transaction binding the contract method 0xb925c02d.
//
// Solidity: function cancelMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactorSession) CancelMatch(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.CancelMatch(&_Swapica.TransactOpts, orderData, signatures)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x514fcac7.
//
// Solidity: function cancelOrder(uint256 id) returns()
func (_Swapica *SwapicaTransactor) CancelOrder(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "cancelOrder", id)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x514fcac7.
//
// Solidity: function cancelOrder(uint256 id) returns()
func (_Swapica *SwapicaSession) CancelOrder(id *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.CancelOrder(&_Swapica.TransactOpts, id)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x514fcac7.
//
// Solidity: function cancelOrder(uint256 id) returns()
func (_Swapica *SwapicaTransactorSession) CancelOrder(id *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.CancelOrder(&_Swapica.TransactOpts, id)
}

// CreateMatch is a paid mutator transaction binding the contract method 0xf7662788.
//
// Solidity: function createMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactor) CreateMatch(opts *bind.TransactOpts, orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "createMatch", orderData, signatures)
}

// CreateMatch is a paid mutator transaction binding the contract method 0xf7662788.
//
// Solidity: function createMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaSession) CreateMatch(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.CreateMatch(&_Swapica.TransactOpts, orderData, signatures)
}

// CreateMatch is a paid mutator transaction binding the contract method 0xf7662788.
//
// Solidity: function createMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactorSession) CreateMatch(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.CreateMatch(&_Swapica.TransactOpts, orderData, signatures)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x96d4f640.
//
// Solidity: function createOrder(address tokenToSell, uint256 amountToSell, address tokenToBuy, uint256 amountToBuy, uint256 destChain) returns()
func (_Swapica *SwapicaTransactor) CreateOrder(opts *bind.TransactOpts, tokenToSell common.Address, amountToSell *big.Int, tokenToBuy common.Address, amountToBuy *big.Int, destChain *big.Int) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "createOrder", tokenToSell, amountToSell, tokenToBuy, amountToBuy, destChain)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x96d4f640.
//
// Solidity: function createOrder(address tokenToSell, uint256 amountToSell, address tokenToBuy, uint256 amountToBuy, uint256 destChain) returns()
func (_Swapica *SwapicaSession) CreateOrder(tokenToSell common.Address, amountToSell *big.Int, tokenToBuy common.Address, amountToBuy *big.Int, destChain *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.CreateOrder(&_Swapica.TransactOpts, tokenToSell, amountToSell, tokenToBuy, amountToBuy, destChain)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x96d4f640.
//
// Solidity: function createOrder(address tokenToSell, uint256 amountToSell, address tokenToBuy, uint256 amountToBuy, uint256 destChain) returns()
func (_Swapica *SwapicaTransactorSession) CreateOrder(tokenToSell common.Address, amountToSell *big.Int, tokenToBuy common.Address, amountToBuy *big.Int, destChain *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.CreateOrder(&_Swapica.TransactOpts, tokenToSell, amountToSell, tokenToBuy, amountToBuy, destChain)
}

// ExecuteMatch is a paid mutator transaction binding the contract method 0x2a9ff0d5.
//
// Solidity: function executeMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactor) ExecuteMatch(opts *bind.TransactOpts, orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "executeMatch", orderData, signatures)
}

// ExecuteMatch is a paid mutator transaction binding the contract method 0x2a9ff0d5.
//
// Solidity: function executeMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaSession) ExecuteMatch(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.ExecuteMatch(&_Swapica.TransactOpts, orderData, signatures)
}

// ExecuteMatch is a paid mutator transaction binding the contract method 0x2a9ff0d5.
//
// Solidity: function executeMatch(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactorSession) ExecuteMatch(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.ExecuteMatch(&_Swapica.TransactOpts, orderData, signatures)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0x14d41b45.
//
// Solidity: function executeOrder(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactor) ExecuteOrder(opts *bind.TransactOpts, orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "executeOrder", orderData, signatures)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0x14d41b45.
//
// Solidity: function executeOrder(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaSession) ExecuteOrder(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.ExecuteOrder(&_Swapica.TransactOpts, orderData, signatures)
}

// ExecuteOrder is a paid mutator transaction binding the contract method 0x14d41b45.
//
// Solidity: function executeOrder(bytes orderData, bytes[] signatures) returns()
func (_Swapica *SwapicaTransactorSession) ExecuteOrder(orderData []byte, signatures [][]byte) (*types.Transaction, error) {
	return _Swapica.Contract.ExecuteOrder(&_Swapica.TransactOpts, orderData, signatures)
}

// RemoveSigners is a paid mutator transaction binding the contract method 0x8d361e43.
//
// Solidity: function removeSigners(address[] signers_) returns()
func (_Swapica *SwapicaTransactor) RemoveSigners(opts *bind.TransactOpts, signers_ []common.Address) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "removeSigners", signers_)
}

// RemoveSigners is a paid mutator transaction binding the contract method 0x8d361e43.
//
// Solidity: function removeSigners(address[] signers_) returns()
func (_Swapica *SwapicaSession) RemoveSigners(signers_ []common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.RemoveSigners(&_Swapica.TransactOpts, signers_)
}

// RemoveSigners is a paid mutator transaction binding the contract method 0x8d361e43.
//
// Solidity: function removeSigners(address[] signers_) returns()
func (_Swapica *SwapicaTransactorSession) RemoveSigners(signers_ []common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.RemoveSigners(&_Swapica.TransactOpts, signers_)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Swapica *SwapicaTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Swapica *SwapicaSession) RenounceOwnership() (*types.Transaction, error) {
	return _Swapica.Contract.RenounceOwnership(&_Swapica.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Swapica *SwapicaTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Swapica.Contract.RenounceOwnership(&_Swapica.TransactOpts)
}

// SetSignaturesThreshold is a paid mutator transaction binding the contract method 0xbf1fe08f.
//
// Solidity: function setSignaturesThreshold(uint256 signaturesThreshold_) returns()
func (_Swapica *SwapicaTransactor) SetSignaturesThreshold(opts *bind.TransactOpts, signaturesThreshold_ *big.Int) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "setSignaturesThreshold", signaturesThreshold_)
}

// SetSignaturesThreshold is a paid mutator transaction binding the contract method 0xbf1fe08f.
//
// Solidity: function setSignaturesThreshold(uint256 signaturesThreshold_) returns()
func (_Swapica *SwapicaSession) SetSignaturesThreshold(signaturesThreshold_ *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.SetSignaturesThreshold(&_Swapica.TransactOpts, signaturesThreshold_)
}

// SetSignaturesThreshold is a paid mutator transaction binding the contract method 0xbf1fe08f.
//
// Solidity: function setSignaturesThreshold(uint256 signaturesThreshold_) returns()
func (_Swapica *SwapicaTransactorSession) SetSignaturesThreshold(signaturesThreshold_ *big.Int) (*types.Transaction, error) {
	return _Swapica.Contract.SetSignaturesThreshold(&_Swapica.TransactOpts, signaturesThreshold_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Swapica *SwapicaTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Swapica *SwapicaSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.TransferOwnership(&_Swapica.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Swapica *SwapicaTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.TransferOwnership(&_Swapica.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Swapica *SwapicaTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Swapica *SwapicaSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.UpgradeTo(&_Swapica.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Swapica *SwapicaTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Swapica.Contract.UpgradeTo(&_Swapica.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Swapica *SwapicaTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Swapica.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Swapica *SwapicaSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Swapica.Contract.UpgradeToAndCall(&_Swapica.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Swapica *SwapicaTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Swapica.Contract.UpgradeToAndCall(&_Swapica.TransactOpts, newImplementation, data)
}

// SwapicaAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Swapica contract.
type SwapicaAdminChangedIterator struct {
	Event *SwapicaAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaAdminChanged represents a AdminChanged event raised by the Swapica contract.
type SwapicaAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Swapica *SwapicaFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*SwapicaAdminChangedIterator, error) {

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &SwapicaAdminChangedIterator{contract: _Swapica.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Swapica *SwapicaFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *SwapicaAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaAdminChanged)
				if err := _Swapica.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Swapica *SwapicaFilterer) ParseAdminChanged(log types.Log) (*SwapicaAdminChanged, error) {
	event := new(SwapicaAdminChanged)
	if err := _Swapica.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwapicaBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Swapica contract.
type SwapicaBeaconUpgradedIterator struct {
	Event *SwapicaBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaBeaconUpgraded represents a BeaconUpgraded event raised by the Swapica contract.
type SwapicaBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Swapica *SwapicaFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*SwapicaBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &SwapicaBeaconUpgradedIterator{contract: _Swapica.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Swapica *SwapicaFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *SwapicaBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaBeaconUpgraded)
				if err := _Swapica.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Swapica *SwapicaFilterer) ParseBeaconUpgraded(log types.Log) (*SwapicaBeaconUpgraded, error) {
	event := new(SwapicaBeaconUpgraded)
	if err := _Swapica.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwapicaInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Swapica contract.
type SwapicaInitializedIterator struct {
	Event *SwapicaInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaInitialized represents a Initialized event raised by the Swapica contract.
type SwapicaInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Swapica *SwapicaFilterer) FilterInitialized(opts *bind.FilterOpts) (*SwapicaInitializedIterator, error) {

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SwapicaInitializedIterator{contract: _Swapica.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Swapica *SwapicaFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SwapicaInitialized) (event.Subscription, error) {

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaInitialized)
				if err := _Swapica.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Swapica *SwapicaFilterer) ParseInitialized(log types.Log) (*SwapicaInitialized, error) {
	event := new(SwapicaInitialized)
	if err := _Swapica.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwapicaMatchUpdatedIterator is returned from FilterMatchUpdated and is used to iterate over the raw logs and unpacked data for MatchUpdated events raised by the Swapica contract.
type SwapicaMatchUpdatedIterator struct {
	Event *SwapicaMatchUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaMatchUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaMatchUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaMatchUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaMatchUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaMatchUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaMatchUpdated represents a MatchUpdated event raised by the Swapica contract.
type SwapicaMatchUpdated struct {
	Id     *big.Int
	Status SwapicaStatus
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMatchUpdated is a free log retrieval operation binding the contract event 0xcbe9b920dc102a8df3c3c6ac1710e90d35d00308330e4f948c90f534fe87aff2.
//
// Solidity: event MatchUpdated(uint256 indexed id, (uint8,uint256) indexed status)
func (_Swapica *SwapicaFilterer) FilterMatchUpdated(opts *bind.FilterOpts, id []*big.Int, status []SwapicaStatus) (*SwapicaMatchUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "MatchUpdated", idRule, statusRule)
	if err != nil {
		return nil, err
	}
	return &SwapicaMatchUpdatedIterator{contract: _Swapica.contract, event: "MatchUpdated", logs: logs, sub: sub}, nil
}

// WatchMatchUpdated is a free log subscription operation binding the contract event 0xcbe9b920dc102a8df3c3c6ac1710e90d35d00308330e4f948c90f534fe87aff2.
//
// Solidity: event MatchUpdated(uint256 indexed id, (uint8,uint256) indexed status)
func (_Swapica *SwapicaFilterer) WatchMatchUpdated(opts *bind.WatchOpts, sink chan<- *SwapicaMatchUpdated, id []*big.Int, status []SwapicaStatus) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "MatchUpdated", idRule, statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaMatchUpdated)
				if err := _Swapica.contract.UnpackLog(event, "MatchUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMatchUpdated is a log parse operation binding the contract event 0xcbe9b920dc102a8df3c3c6ac1710e90d35d00308330e4f948c90f534fe87aff2.
//
// Solidity: event MatchUpdated(uint256 indexed id, (uint8,uint256) indexed status)
func (_Swapica *SwapicaFilterer) ParseMatchUpdated(log types.Log) (*SwapicaMatchUpdated, error) {
	event := new(SwapicaMatchUpdated)
	if err := _Swapica.contract.UnpackLog(event, "MatchUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwapicaOrderUpdatedIterator is returned from FilterOrderUpdated and is used to iterate over the raw logs and unpacked data for OrderUpdated events raised by the Swapica contract.
type SwapicaOrderUpdatedIterator struct {
	Event *SwapicaOrderUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaOrderUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaOrderUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaOrderUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaOrderUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaOrderUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaOrderUpdated represents a OrderUpdated event raised by the Swapica contract.
type SwapicaOrderUpdated struct {
	Id     *big.Int
	Status SwapicaStatus
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterOrderUpdated is a free log retrieval operation binding the contract event 0x73a9fddc811bd10d7714a344a6c50d5b982b2f9fae4b3c5bd76f0d01afe6d0b8.
//
// Solidity: event OrderUpdated(uint256 indexed id, (uint8,uint256) indexed status)
func (_Swapica *SwapicaFilterer) FilterOrderUpdated(opts *bind.FilterOpts, id []*big.Int, status []SwapicaStatus) (*SwapicaOrderUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "OrderUpdated", idRule, statusRule)
	if err != nil {
		return nil, err
	}
	return &SwapicaOrderUpdatedIterator{contract: _Swapica.contract, event: "OrderUpdated", logs: logs, sub: sub}, nil
}

// WatchOrderUpdated is a free log subscription operation binding the contract event 0x73a9fddc811bd10d7714a344a6c50d5b982b2f9fae4b3c5bd76f0d01afe6d0b8.
//
// Solidity: event OrderUpdated(uint256 indexed id, (uint8,uint256) indexed status)
func (_Swapica *SwapicaFilterer) WatchOrderUpdated(opts *bind.WatchOpts, sink chan<- *SwapicaOrderUpdated, id []*big.Int, status []SwapicaStatus) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "OrderUpdated", idRule, statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaOrderUpdated)
				if err := _Swapica.contract.UnpackLog(event, "OrderUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderUpdated is a log parse operation binding the contract event 0x73a9fddc811bd10d7714a344a6c50d5b982b2f9fae4b3c5bd76f0d01afe6d0b8.
//
// Solidity: event OrderUpdated(uint256 indexed id, (uint8,uint256) indexed status)
func (_Swapica *SwapicaFilterer) ParseOrderUpdated(log types.Log) (*SwapicaOrderUpdated, error) {
	event := new(SwapicaOrderUpdated)
	if err := _Swapica.contract.UnpackLog(event, "OrderUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwapicaOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Swapica contract.
type SwapicaOwnershipTransferredIterator struct {
	Event *SwapicaOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaOwnershipTransferred represents a OwnershipTransferred event raised by the Swapica contract.
type SwapicaOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Swapica *SwapicaFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SwapicaOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SwapicaOwnershipTransferredIterator{contract: _Swapica.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Swapica *SwapicaFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SwapicaOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaOwnershipTransferred)
				if err := _Swapica.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Swapica *SwapicaFilterer) ParseOwnershipTransferred(log types.Log) (*SwapicaOwnershipTransferred, error) {
	event := new(SwapicaOwnershipTransferred)
	if err := _Swapica.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwapicaUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Swapica contract.
type SwapicaUpgradedIterator struct {
	Event *SwapicaUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwapicaUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwapicaUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwapicaUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwapicaUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwapicaUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwapicaUpgraded represents a Upgraded event raised by the Swapica contract.
type SwapicaUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Swapica *SwapicaFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*SwapicaUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Swapica.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &SwapicaUpgradedIterator{contract: _Swapica.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Swapica *SwapicaFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *SwapicaUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Swapica.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwapicaUpgraded)
				if err := _Swapica.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Swapica *SwapicaFilterer) ParseUpgraded(log types.Log) (*SwapicaUpgraded, error) {
	event := new(SwapicaUpgraded)
	if err := _Swapica.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
